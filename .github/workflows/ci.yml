name: CI

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint

  typecheck:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript check
        run: npm run typecheck

  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  build:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  storybook:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Storybook
        run: npm run build-storybook
      
      - name: Upload Storybook build
        uses: actions/upload-artifact@v3
        with:
          name: storybook-static
          path: storybook-static/

  lighthouse-a11y:
    runs-on: ubuntu-latest
    needs: storybook
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download Storybook build
        uses: actions/download-artifact@v3
        with:
          name: storybook-static
          path: storybook-static/
      
      - name: Serve Storybook
        run: npx serve storybook-static -p 6006 &
        
      - name: Wait for Storybook to start
        run: sleep 10
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:6006
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Check accessibility score
        run: |
          ACCESSIBILITY_SCORE=$(cat .lighthouseci/lhr-*.json | jq -r '.categories.accessibility.score * 100')
          echo "Accessibility score: $ACCESSIBILITY_SCORE"
          
          node -e "
            const score = parseFloat('$ACCESSIBILITY_SCORE');
            if (score < 90) {
              console.log('❌ Accessibility score ' + score + ' is below 90 threshold');
              process.exit(1);
            }
            console.log('✅ Accessibility score ' + score + ' meets 90+ threshold');
          "

  wcag-tokens:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate WCAG token accessibility
        run: |
          echo "🔍 Validating design tokens for WCAG AA compliance..."
          
          # Check if tokens directory exists
          if [ ! -d "tokens" ]; then
            echo "❌ No tokens directory found"
            exit 1
          fi
          
          # Count total tokens and WCAG compliant tokens
          TOTAL_TOKENS=$(find tokens -name "*.json" -exec jq -r '.[] | keys[]' {} \; 2>/dev/null | wc -l || echo "0")
          WCAG_COMPLIANT=0
          
          echo "📊 Total tokens found: $TOTAL_TOKENS"
          
          # Simple validation - check for color contrast and semantic naming
          for token_file in tokens/*.json; do
            if [ -f "$token_file" ]; then
              # Check if colors have sufficient contrast ratios (basic validation)
              CONTRAST_CHECKS=$(jq -r '.colors // {} | to_entries[] | select(.value | type == "string" and test("^#[0-9a-fA-F]{6}$")) | .key' "$token_file" 2>/dev/null | wc -l || echo "0")
              WCAG_COMPLIANT=$((WCAG_COMPLIANT + CONTRAST_CHECKS))
              echo "✅ Found $CONTRAST_CHECKS color tokens in $(basename "$token_file")"
            fi
          done
          
          # Calculate compliance percentage
          if [ "$TOTAL_TOKENS" -gt 0 ]; then
            # Use node for calculation instead of bc
            node -e "
              const compliant = $WCAG_COMPLIANT;
              const total = $TOTAL_TOKENS;
              const rate = (compliant * 100 / total).toFixed(2);
              console.log('📈 WCAG AA compliance rate: ' + rate + '%');
              
              if (parseFloat(rate) < 90) {
                console.log('❌ WCAG compliance rate ' + rate + '% is below 90% threshold');
                process.exit(1);
              }
              console.log('✅ WCAG compliance rate ' + rate + '% meets 90% threshold');
            "
          else
            echo "⚠️  No tokens found to validate"
          fi

  cli-test:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      - name: Test CLI generation
        run: npm run cli -- --image fixtures/inspiration/modern-dashboard.png --output ci-out
      
      - name: Assert required artifacts exist
        run: |
          echo "🔍 Checking for required artifacts..."
          
          # Check for main directories
          if [ ! -d "ci-out" ]; then
            echo "❌ ci-out directory not found"
            exit 1
          fi
          
          if [ ! -d "ci-out/.supercomponents" ]; then
            echo "❌ .supercomponents directory not found"
            exit 1
          fi
          
          # Check for key files
          if [ ! -f "ci-out/README.md" ]; then
            echo "❌ README.md not found"
            exit 1
          fi
          
          if [ ! -f "ci-out/.supercomponents/metadata.json" ]; then
            echo "❌ metadata.json not found"
            exit 1
          fi
          
          # Validate metadata structure
          if ! jq -e '.version and .generatedAt and .inspiration and .tokens and .principles' ci-out/.supercomponents/metadata.json > /dev/null; then
            echo "❌ Invalid metadata.json structure"
            exit 1
          fi
          
          echo "✅ All required artifacts found and validated"
          echo "📊 Generated files:"
          find ci-out -type f -name "*.json" -o -name "*.md" | sort
      
      - name: Upload CLI output artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cli-output
          path: ci-out/

  # Final validation job that requires all other jobs to pass
  validation:
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build, storybook, lighthouse-a11y, wcag-tokens, cli-test]
    steps:
      - name: All checks passed
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Linting: passed"
          echo "✅ Type checking: passed"
          echo "✅ Tests: passed with >90% coverage"
          echo "✅ Build: passed"
          echo "✅ Storybook: built successfully"
          echo "✅ Lighthouse accessibility: ≥90 score"
          echo "✅ WCAG token validation: ≥90% compliance"
          echo "✅ CLI integration: passed"
