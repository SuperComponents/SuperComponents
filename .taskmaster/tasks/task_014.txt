# Task ID: 14
# Title: Integrate generateInstruction Tool with Super Prompt System
# Status: pending
# Dependencies: 7, 4, 2
# Priority: medium
# Description: Create a streamlined integration layer that connects the generateInstruction tool with enhanced prompt templates and existing AI workflow patterns for improved instruction generation.
# Details:
Implement a comprehensive integration system that enhances the generateInstruction tool with super prompt capabilities:

1. **Enhanced Prompt Templates** (src/prompts/superPrompts.ts):
   - Create structured prompt templates with role-based instructions, context injection, and output formatting
   - Implement prompt composition patterns: `const SUPER_INSTRUCTION_PROMPT = createSuperPrompt({role: 'expert-developer', context: 'design-to-code', format: 'structured-steps'})`
   - Add prompt versioning and A/B testing capabilities for optimization

2. **Integration Layer** (src/integrations/superPromptIntegration.ts):
   - Extend generateInstructionHandler with super prompt preprocessing: `export const enhancedGenerateInstruction = async ({design, components, promptConfig}) => { const superPrompt = buildSuperPrompt(design, components, promptConfig); return generateInstructionHandler({design, components, prompt: superPrompt}); }`
   - Implement prompt context enrichment with project metadata, component relationships, and design system patterns
   - Add intelligent prompt selection based on design complexity and component types

3. **Workflow Pattern Integration**:
   - Connect with existing AI workflow patterns from the LLM integration layer (Task 4)
   - Implement streaming support for large instruction sets using streamComplete
   - Add retry logic with exponential backoff for failed instruction generation
   - Integrate with caching layer to avoid regenerating identical instructions

4. **Configuration System**:
   - Create configuration schema for super prompt settings: temperature, max tokens, prompt templates
   - Implement environment-based prompt selection (development vs production prompts)
   - Add user-customizable prompt templates and instruction formats

5. **Enhanced Output Processing**:
   - Post-process generated instructions with validation against InstructionSchema
   - Add instruction quality scoring and automatic refinement triggers
   - Implement instruction chunking for complex multi-step processes

# Test Strategy:
Comprehensive integration testing approach:

1. **Super Prompt Template Testing**:
   - Unit tests for prompt template generation with various design/component combinations
   - Validate prompt structure includes all required context: design tokens, component props, relationships
   - Test prompt versioning and template selection logic

2. **Integration Layer Testing**:
   - Integration tests comparing standard vs super prompt instruction quality
   - Mock LLM responses to test prompt preprocessing and output post-processing
   - Verify enhanced instructions maintain InstructionSchema compliance
   - Performance testing: enhanced generation should complete within 12s (vs 8s baseline)

3. **Workflow Pattern Testing**:
   - Test streaming instruction generation for large design files (>100 components)
   - Verify caching integration prevents duplicate super prompt processing
   - Test retry logic with simulated API failures and rate limiting

4. **End-to-End Validation**:
   - Create test fixtures with complex design systems and verify instruction quality improvements
   - A/B test instruction clarity and completeness: super prompt vs standard prompt
   - Validate generated instructions can be successfully executed by downstream tools

5. **Configuration Testing**:
   - Test environment-based prompt selection (dev/prod configurations)
   - Verify custom prompt template loading and validation
   - Test configuration schema validation and error handling
